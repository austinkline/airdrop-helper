package coinbase

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"time"
)

var (
	cbAPIKey    = os.Getenv("CB_API_KEY")
	cbAPISecret = os.Getenv("CB_API_SECRET")

	version = "2023-04-01" // https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/versioning
)

// signRequest modifies a http.Request to include the Coinbase-Auth-Signature
// headers. You can find more information about these headers here:
// https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-key-authentication
func signRequest(req *http.Request) (err error) {
	reqTime := time.Now().Unix()

	/*
		The CB-ACCESS-SIGN header is generated by creating a sha256 HMAC using the secret key on the
		prehash string timestamp + method + requestPath + body (where + represents string concatenation).

		timestamp is the same as the X-CB-ACCESS-TIMESTAMP header.
		method should be UPPER CASE.
		requestPath is the full path and query parameters of the URL, e.g.: /v2/exchange-rates?currency=USD.
	*/
	body := ""

	if req.Body != nil {
		var bytes []byte
		bytes, err = ioutil.ReadAll(req.Body)
		if err != nil {
			return
		}
		body = string(bytes)
	}

	message := fmt.Sprintf("%d%s%s%s", reqTime, req.Method, req.URL.Path, body)

	// generate a sha256 HMAC using the secret key on the prehash string
	signature := generateHMAC(message, cbAPISecret)

	req.Header.Set("CB-ACCESS-KEY", cbAPIKey)
	req.Header.Set("CB-ACCESS-SIGN", signature)
	req.Header.Set("CB-ACCESS-TIMESTAMP", fmt.Sprintf("%d", reqTime))
	req.Header.Set("CB-VERSION", version)

	return
}

func generateHMAC(message string, secret string) (signature string) {
	// Convert the secret to bytes
	secretBytes := []byte(secret)
	// Convert the prehash string to bytes
	prehashBytes := []byte(message)
	// Create a new HMAC hasher with the SHA256 hash function
	hasher := hmac.New(sha256.New, secretBytes)
	// Write the prehash bytes to the hasher
	hasher.Write(prehashBytes)
	// Get the resulting HMAC hash
	hmacHash := hasher.Sum(nil)
	// Convert the hash to a hex string
	signature = hex.EncodeToString(hmacHash)
	return
}
